<?php
/**
 * Audio
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Libre Graph API
 *
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Audio Class Doc Comment
 *
 * @category Class
 * @description The Audio resource groups audio-related properties on an item into a single structure.  If a DriveItem has a non-null audio facet, the item represents an audio file. The properties of the Audio resource are populated by extracting metadata from the file.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Audio implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'audio';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'album' => 'string',
        'album_artist' => 'string',
        'artist' => 'string',
        'bitrate' => 'int',
        'composers' => 'string',
        'copyright' => 'string',
        'disc' => 'int',
        'disc_count' => 'int',
        'duration' => 'int',
        'genre' => 'string',
        'has_drm' => 'bool',
        'is_variable_bitrate' => 'bool',
        'title' => 'string',
        'track' => 'int',
        'track_count' => 'int',
        'year' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'album' => null,
        'album_artist' => null,
        'artist' => null,
        'bitrate' => 'int64',
        'composers' => null,
        'copyright' => null,
        'disc' => 'int16',
        'disc_count' => 'int16',
        'duration' => 'int64',
        'genre' => null,
        'has_drm' => null,
        'is_variable_bitrate' => null,
        'title' => null,
        'track' => 'int32',
        'track_count' => 'int32',
        'year' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'album' => false,
		'album_artist' => false,
		'artist' => false,
		'bitrate' => false,
		'composers' => false,
		'copyright' => false,
		'disc' => false,
		'disc_count' => false,
		'duration' => false,
		'genre' => false,
		'has_drm' => false,
		'is_variable_bitrate' => false,
		'title' => false,
		'track' => false,
		'track_count' => false,
		'year' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'album' => 'album',
        'album_artist' => 'albumArtist',
        'artist' => 'artist',
        'bitrate' => 'bitrate',
        'composers' => 'composers',
        'copyright' => 'copyright',
        'disc' => 'disc',
        'disc_count' => 'discCount',
        'duration' => 'duration',
        'genre' => 'genre',
        'has_drm' => 'hasDrm',
        'is_variable_bitrate' => 'isVariableBitrate',
        'title' => 'title',
        'track' => 'track',
        'track_count' => 'trackCount',
        'year' => 'year'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'album' => 'setAlbum',
        'album_artist' => 'setAlbumArtist',
        'artist' => 'setArtist',
        'bitrate' => 'setBitrate',
        'composers' => 'setComposers',
        'copyright' => 'setCopyright',
        'disc' => 'setDisc',
        'disc_count' => 'setDiscCount',
        'duration' => 'setDuration',
        'genre' => 'setGenre',
        'has_drm' => 'setHasDrm',
        'is_variable_bitrate' => 'setIsVariableBitrate',
        'title' => 'setTitle',
        'track' => 'setTrack',
        'track_count' => 'setTrackCount',
        'year' => 'setYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'album' => 'getAlbum',
        'album_artist' => 'getAlbumArtist',
        'artist' => 'getArtist',
        'bitrate' => 'getBitrate',
        'composers' => 'getComposers',
        'copyright' => 'getCopyright',
        'disc' => 'getDisc',
        'disc_count' => 'getDiscCount',
        'duration' => 'getDuration',
        'genre' => 'getGenre',
        'has_drm' => 'getHasDrm',
        'is_variable_bitrate' => 'getIsVariableBitrate',
        'title' => 'getTitle',
        'track' => 'getTrack',
        'track_count' => 'getTrackCount',
        'year' => 'getYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('album', $data ?? [], null);
        $this->setIfExists('album_artist', $data ?? [], null);
        $this->setIfExists('artist', $data ?? [], null);
        $this->setIfExists('bitrate', $data ?? [], null);
        $this->setIfExists('composers', $data ?? [], null);
        $this->setIfExists('copyright', $data ?? [], null);
        $this->setIfExists('disc', $data ?? [], null);
        $this->setIfExists('disc_count', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('genre', $data ?? [], null);
        $this->setIfExists('has_drm', $data ?? [], null);
        $this->setIfExists('is_variable_bitrate', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('track', $data ?? [], null);
        $this->setIfExists('track_count', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets album
     *
     * @return string|null
     */
    public function getAlbum()
    {
        return $this->container['album'];
    }

    /**
     * Sets album
     *
     * @param string|null $album The title of the album for this audio file.
     *
     * @return self
     */
    public function setAlbum($album)
    {
        if (is_null($album)) {
            throw new \InvalidArgumentException('non-nullable album cannot be null');
        }
        $this->container['album'] = $album;

        return $this;
    }

    /**
     * Gets album_artist
     *
     * @return string|null
     */
    public function getAlbumArtist()
    {
        return $this->container['album_artist'];
    }

    /**
     * Sets album_artist
     *
     * @param string|null $album_artist The artist named on the album for the audio file.
     *
     * @return self
     */
    public function setAlbumArtist($album_artist)
    {
        if (is_null($album_artist)) {
            throw new \InvalidArgumentException('non-nullable album_artist cannot be null');
        }
        $this->container['album_artist'] = $album_artist;

        return $this;
    }

    /**
     * Gets artist
     *
     * @return string|null
     */
    public function getArtist()
    {
        return $this->container['artist'];
    }

    /**
     * Sets artist
     *
     * @param string|null $artist The performing artist for the audio file.
     *
     * @return self
     */
    public function setArtist($artist)
    {
        if (is_null($artist)) {
            throw new \InvalidArgumentException('non-nullable artist cannot be null');
        }
        $this->container['artist'] = $artist;

        return $this;
    }

    /**
     * Gets bitrate
     *
     * @return int|null
     */
    public function getBitrate()
    {
        return $this->container['bitrate'];
    }

    /**
     * Sets bitrate
     *
     * @param int|null $bitrate Bitrate expressed in kbps.
     *
     * @return self
     */
    public function setBitrate($bitrate)
    {
        if (is_null($bitrate)) {
            throw new \InvalidArgumentException('non-nullable bitrate cannot be null');
        }
        $this->container['bitrate'] = $bitrate;

        return $this;
    }

    /**
     * Gets composers
     *
     * @return string|null
     */
    public function getComposers()
    {
        return $this->container['composers'];
    }

    /**
     * Sets composers
     *
     * @param string|null $composers The name of the composer of the audio file.
     *
     * @return self
     */
    public function setComposers($composers)
    {
        if (is_null($composers)) {
            throw new \InvalidArgumentException('non-nullable composers cannot be null');
        }
        $this->container['composers'] = $composers;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string|null
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string|null $copyright Copyright information for the audio file.
     *
     * @return self
     */
    public function setCopyright($copyright)
    {
        if (is_null($copyright)) {
            throw new \InvalidArgumentException('non-nullable copyright cannot be null');
        }
        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets disc
     *
     * @return int|null
     */
    public function getDisc()
    {
        return $this->container['disc'];
    }

    /**
     * Sets disc
     *
     * @param int|null $disc The number of the disc this audio file came from.
     *
     * @return self
     */
    public function setDisc($disc)
    {
        if (is_null($disc)) {
            throw new \InvalidArgumentException('non-nullable disc cannot be null');
        }
        $this->container['disc'] = $disc;

        return $this;
    }

    /**
     * Gets disc_count
     *
     * @return int|null
     */
    public function getDiscCount()
    {
        return $this->container['disc_count'];
    }

    /**
     * Sets disc_count
     *
     * @param int|null $disc_count The total number of discs in this album.
     *
     * @return self
     */
    public function setDiscCount($disc_count)
    {
        if (is_null($disc_count)) {
            throw new \InvalidArgumentException('non-nullable disc_count cannot be null');
        }
        $this->container['disc_count'] = $disc_count;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Duration of the audio file, expressed in milliseconds
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string|null
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string|null $genre The genre of this audio file.
     *
     * @return self
     */
    public function setGenre($genre)
    {
        if (is_null($genre)) {
            throw new \InvalidArgumentException('non-nullable genre cannot be null');
        }
        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets has_drm
     *
     * @return bool|null
     */
    public function getHasDrm()
    {
        return $this->container['has_drm'];
    }

    /**
     * Sets has_drm
     *
     * @param bool|null $has_drm Indicates if the file is protected with digital rights management.
     *
     * @return self
     */
    public function setHasDrm($has_drm)
    {
        if (is_null($has_drm)) {
            throw new \InvalidArgumentException('non-nullable has_drm cannot be null');
        }
        $this->container['has_drm'] = $has_drm;

        return $this;
    }

    /**
     * Gets is_variable_bitrate
     *
     * @return bool|null
     */
    public function getIsVariableBitrate()
    {
        return $this->container['is_variable_bitrate'];
    }

    /**
     * Sets is_variable_bitrate
     *
     * @param bool|null $is_variable_bitrate Indicates if the file is encoded with a variable bitrate.
     *
     * @return self
     */
    public function setIsVariableBitrate($is_variable_bitrate)
    {
        if (is_null($is_variable_bitrate)) {
            throw new \InvalidArgumentException('non-nullable is_variable_bitrate cannot be null');
        }
        $this->container['is_variable_bitrate'] = $is_variable_bitrate;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the audio file.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets track
     *
     * @return int|null
     */
    public function getTrack()
    {
        return $this->container['track'];
    }

    /**
     * Sets track
     *
     * @param int|null $track The number of the track on the original disc for this audio file.
     *
     * @return self
     */
    public function setTrack($track)
    {
        if (is_null($track)) {
            throw new \InvalidArgumentException('non-nullable track cannot be null');
        }
        $this->container['track'] = $track;

        return $this;
    }

    /**
     * Gets track_count
     *
     * @return int|null
     */
    public function getTrackCount()
    {
        return $this->container['track_count'];
    }

    /**
     * Sets track_count
     *
     * @param int|null $track_count The total number of tracks on the original disc for this audio file.
     *
     * @return self
     */
    public function setTrackCount($track_count)
    {
        if (is_null($track_count)) {
            throw new \InvalidArgumentException('non-nullable track_count cannot be null');
        }
        $this->container['track_count'] = $track_count;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year The year the audio file was recorded.
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


