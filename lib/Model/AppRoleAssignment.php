<?php
/**
 * AppRoleAssignment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Libre Graph API
 *
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppRoleAssignment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppRoleAssignment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'appRoleAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'deleted_date_time' => '\DateTime',
        'app_role_id' => 'string',
        'created_date_time' => '\DateTime',
        'principal_display_name' => 'string',
        'principal_id' => 'string',
        'principal_type' => 'string',
        'resource_display_name' => 'string',
        'resource_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'deleted_date_time' => 'date-time',
        'app_role_id' => 'uuid',
        'created_date_time' => 'date-time',
        'principal_display_name' => null,
        'principal_id' => 'uuid',
        'principal_type' => null,
        'resource_display_name' => null,
        'resource_id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'deleted_date_time' => false,
		'app_role_id' => false,
		'created_date_time' => true,
		'principal_display_name' => true,
		'principal_id' => true,
		'principal_type' => true,
		'resource_display_name' => true,
		'resource_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'deleted_date_time' => 'deletedDateTime',
        'app_role_id' => 'appRoleId',
        'created_date_time' => 'createdDateTime',
        'principal_display_name' => 'principalDisplayName',
        'principal_id' => 'principalId',
        'principal_type' => 'principalType',
        'resource_display_name' => 'resourceDisplayName',
        'resource_id' => 'resourceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'deleted_date_time' => 'setDeletedDateTime',
        'app_role_id' => 'setAppRoleId',
        'created_date_time' => 'setCreatedDateTime',
        'principal_display_name' => 'setPrincipalDisplayName',
        'principal_id' => 'setPrincipalId',
        'principal_type' => 'setPrincipalType',
        'resource_display_name' => 'setResourceDisplayName',
        'resource_id' => 'setResourceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'deleted_date_time' => 'getDeletedDateTime',
        'app_role_id' => 'getAppRoleId',
        'created_date_time' => 'getCreatedDateTime',
        'principal_display_name' => 'getPrincipalDisplayName',
        'principal_id' => 'getPrincipalId',
        'principal_type' => 'getPrincipalType',
        'resource_display_name' => 'getResourceDisplayName',
        'resource_id' => 'getResourceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('deleted_date_time', $data ?? [], null);
        $this->setIfExists('app_role_id', $data ?? [], null);
        $this->setIfExists('created_date_time', $data ?? [], null);
        $this->setIfExists('principal_display_name', $data ?? [], null);
        $this->setIfExists('principal_id', $data ?? [], null);
        $this->setIfExists('principal_type', $data ?? [], null);
        $this->setIfExists('resource_display_name', $data ?? [], null);
        $this->setIfExists('resource_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['deleted_date_time']) && !preg_match("/^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/", $this->container['deleted_date_time'])) {
            $invalidProperties[] = "invalid value for 'deleted_date_time', must be conform to the pattern /^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/.";
        }

        if ($this->container['app_role_id'] === null) {
            $invalidProperties[] = "'app_role_id' can't be null";
        }
        if (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/", $this->container['app_role_id'])) {
            $invalidProperties[] = "invalid value for 'app_role_id', must be conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.";
        }

        if (!is_null($this->container['created_date_time']) && !preg_match("/^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$/", $this->container['created_date_time'])) {
            $invalidProperties[] = "invalid value for 'created_date_time', must be conform to the pattern /^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$/.";
        }

        if ($this->container['principal_id'] === null) {
            $invalidProperties[] = "'principal_id' can't be null";
        }
        if (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/", $this->container['principal_id'])) {
            $invalidProperties[] = "invalid value for 'principal_id', must be conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.";
        }

        if ($this->container['resource_id'] === null) {
            $invalidProperties[] = "'resource_id' can't be null";
        }
        if (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/", $this->container['resource_id'])) {
            $invalidProperties[] = "invalid value for 'resource_id', must be conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the object. 12345678-9abc-def0-1234-56789abcde. The value of the ID property is often, but not exclusively, in the form of a GUID. The value should be treated as an opaque identifier and not based in being a GUID. Null values are not allowed. Read-only.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets deleted_date_time
     *
     * @return \DateTime|null
     */
    public function getDeletedDateTime()
    {
        return $this->container['deleted_date_time'];
    }

    /**
     * Sets deleted_date_time
     *
     * @param \DateTime|null $deleted_date_time deleted_date_time
     *
     * @return self
     */
    public function setDeletedDateTime($deleted_date_time)
    {
        if (is_null($deleted_date_time)) {
            throw new \InvalidArgumentException('non-nullable deleted_date_time cannot be null');
        }

        if ((!preg_match("/^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/", ObjectSerializer::toString($deleted_date_time)))) {
            throw new \InvalidArgumentException("invalid value for \$deleted_date_time when calling AppRoleAssignment., must conform to the pattern /^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?([Zz]|[+-][0-9][0-9]:[0-9][0-9])$/.");
        }

        $this->container['deleted_date_time'] = $deleted_date_time;

        return $this;
    }

    /**
     * Gets app_role_id
     *
     * @return string
     */
    public function getAppRoleId()
    {
        return $this->container['app_role_id'];
    }

    /**
     * Sets app_role_id
     *
     * @param string $app_role_id The identifier (id) for the app role which is assigned to the user. Required on create.
     *
     * @return self
     */
    public function setAppRoleId($app_role_id)
    {
        if (is_null($app_role_id)) {
            throw new \InvalidArgumentException('non-nullable app_role_id cannot be null');
        }

        if ((!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/", ObjectSerializer::toString($app_role_id)))) {
            throw new \InvalidArgumentException("invalid value for \$app_role_id when calling AppRoleAssignment., must conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.");
        }

        $this->container['app_role_id'] = $app_role_id;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime|null
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime|null $created_date_time The time when the app role assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     *
     * @return self
     */
    public function setCreatedDateTime($created_date_time)
    {
        if (is_null($created_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'created_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($created_date_time) && (!preg_match("/^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$/", ObjectSerializer::toString($created_date_time)))) {
            throw new \InvalidArgumentException("invalid value for \$created_date_time when calling AppRoleAssignment., must conform to the pattern /^[0-9]{4,}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]([.][0-9]{1,12})?(Z|[+-][0-9][0-9]:[0-9][0-9])$/.");
        }

        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets principal_display_name
     *
     * @return string|null
     */
    public function getPrincipalDisplayName()
    {
        return $this->container['principal_display_name'];
    }

    /**
     * Sets principal_display_name
     *
     * @param string|null $principal_display_name The display name of the user, group, or service principal that was granted the app role assignment. Read-only.
     *
     * @return self
     */
    public function setPrincipalDisplayName($principal_display_name)
    {
        if (is_null($principal_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'principal_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('principal_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['principal_display_name'] = $principal_display_name;

        return $this;
    }

    /**
     * Gets principal_id
     *
     * @return string
     */
    public function getPrincipalId()
    {
        return $this->container['principal_id'];
    }

    /**
     * Sets principal_id
     *
     * @param string $principal_id The unique identifier (id) for the user, security group, or service principal being granted the app role. Security groups with dynamic memberships are supported. Required on create.
     *
     * @return self
     */
    public function setPrincipalId($principal_id)
    {
        if (is_null($principal_id)) {
            array_push($this->openAPINullablesSetToNull, 'principal_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('principal_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($principal_id) && (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/", ObjectSerializer::toString($principal_id)))) {
            throw new \InvalidArgumentException("invalid value for \$principal_id when calling AppRoleAssignment., must conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.");
        }

        $this->container['principal_id'] = $principal_id;

        return $this;
    }

    /**
     * Gets principal_type
     *
     * @return string|null
     */
    public function getPrincipalType()
    {
        return $this->container['principal_type'];
    }

    /**
     * Sets principal_type
     *
     * @param string|null $principal_type The type of the assigned principal. This can either be User, Group, or ServicePrincipal. Read-only.
     *
     * @return self
     */
    public function setPrincipalType($principal_type)
    {
        if (is_null($principal_type)) {
            array_push($this->openAPINullablesSetToNull, 'principal_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('principal_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['principal_type'] = $principal_type;

        return $this;
    }

    /**
     * Gets resource_display_name
     *
     * @return string|null
     */
    public function getResourceDisplayName()
    {
        return $this->container['resource_display_name'];
    }

    /**
     * Sets resource_display_name
     *
     * @param string|null $resource_display_name The display name of the resource app's service principal to which the assignment is made.
     *
     * @return self
     */
    public function setResourceDisplayName($resource_display_name)
    {
        if (is_null($resource_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'resource_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resource_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resource_display_name'] = $resource_display_name;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id The unique identifier (id) for the resource service principal for which the assignment is made. Required on create.
     *
     * @return self
     */
    public function setResourceId($resource_id)
    {
        if (is_null($resource_id)) {
            array_push($this->openAPINullablesSetToNull, 'resource_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resource_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($resource_id) && (!preg_match("/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/", ObjectSerializer::toString($resource_id)))) {
            throw new \InvalidArgumentException("invalid value for \$resource_id when calling AppRoleAssignment., must conform to the pattern /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.");
        }

        $this->container['resource_id'] = $resource_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


